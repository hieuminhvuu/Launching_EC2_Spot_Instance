[
{
	"uri": "https://hieuminhvuu.github.io/Launching_EC2_Spot_Instance/vi/1-starting_the_workshop/",
	"title": "Bắt đầu workshop",
	"tags": [],
	"description": "",
	"content": "Để cung cấp tài nguyên AWS theo cách lập trình, bạn chạy các lệnh Giao diện dòng lệnh AWS (CLI) trong AWS CloudShell. Tất cả các lệnh CLI bạn sắp chạy có thể được sao chép bằng CloudFormation, AWS SDK và Terraform.\nAWS CloudShell AWS CloudShell is a browser-based shell console that makes it easy to securely manage, explore, and interact with your AWS resources. To launch CloudShell click on the shortcut available in the top navigation bar (highlighted in green in below image), or simply click on this AWS CloudShell console link.\nBạn có thể sử dụng ví dụ bên dưới để biết bạn hiện đang kết nối đến khu vực nào (khu vực được đánh dấu màu đỏ). Tất cả tài nguyên bạn tạo trong suốt hội thảo đều được triển khai trong khu vực đã chọn.\n"
},
{
	"uri": "https://hieuminhvuu.github.io/Launching_EC2_Spot_Instance/vi/",
	"title": "Khởi chạy EC2 Spot Instance",
	"tags": [],
	"description": "",
	"content": "Khởi chạy EC2 Spot Instance Tổng quan Trong workshop này, chúng ta tìm hiểu về các nguyên tắc cơ bản của EC2 Spot Instance và các công cụ được đề xuất để khởi chạy EC2 Spot Instance, kiểm tra khả năng phục hồi và xem lịch sử giá cả.\nBạn đóng vai một kỹ sư DevOps, người được cung cấp một ứng dụng mẫu và được giao nhiệm vụ triển khai ứng dụng đó một cách tiết kiệm chi phí bằng cách sử dụng các nhóm EC2 Auto Scaling và Nhóm EC2 trong Khu vực AWS tối ưu. Sau khi triển khai, bạn mô phỏng tình trạng gián đoạn của Phiên bản dùng ngay để kiểm tra khả năng phục hồi của các nhóm Tự động thay đổi quy mô và cuối cùng tính toán mức tiết kiệm chi phí ước tính.\nDự kiến thời gian và chi phí để tổ chức workshop này Thời gian ước tính để hoàn thành workshop là 45 đến 60 phút. Chi phí ước tính là dưới 5 đô la.\nNội dung Bắt đầu workshop Tạo launch template Chạy EC2 spot instances thông qua EC2 auto scaling group Chạy EC2 spot instances thông qua EC2 fleet Tạo một điểm gián đoạn Tổng hợp về tiết kiệm Spot placement score Spot Blueprint Dọn dẹp tài nguyên "
},
{
	"uri": "https://hieuminhvuu.github.io/Launching_EC2_Spot_Instance/vi/2-creating_a_launch_template/",
	"title": "Khởi tạo một launch template",
	"tags": [],
	"description": "",
	"content": "Là bước tiên quyết trước khi tạo nhóm Auto Scaling EC2 hoặc EC2 Fleet, bạn tạo một launch template. Launch template cho phép bạn xác định các tham số khởi chạy để bạn không phải chỉ định chúng mỗi khi khởi chạy một inctance mới. Nó bao gồm ID của Amazon Machine Image (AMI), loại phiên bản, cặp khóa, nhóm bảo mật và các tham số khác dùng để khởi chạy instance EC2.\nTrong hội thảo này, bạn sử dụng VPC mặc định của tài khoản của mình để tạo phiên bản.\nKhởi tạo một launch template Tạo tệp cấu hình launch-template-data.json trong CloudShell bằng cách chạy các lệnh bên dưới. Khi kiểm tra cấu hình, bạn nhận thấy rằng tham số ImageId có giá trị thay thế là %ami-id% và UserData chứa các bước cài đặt Webserver được mã hóa base64. Sau khi tạo mẫu khởi chạy, bạn có thể mô tả nó và giải mã dữ liệu người dùng để xem nội dung. cat \u0026lt;\u0026lt; EOF \u0026gt; launch-template-data.json { \u0026#34;ImageId\u0026#34;: \u0026#34;%ami-id%\u0026#34;, \u0026#34;TagSpecifications\u0026#34;: [ { \u0026#34;ResourceType\u0026#34;: \u0026#34;instance\u0026#34;, \u0026#34;Tags\u0026#34;: [ { \u0026#34;Key\u0026#34;: \u0026#34;Name\u0026#34;, \u0026#34;Value\u0026#34;: \u0026#34;mySpotWorkshop\u0026#34; } ] } ], \u0026#34;UserData\u0026#34;: \u0026#34;I2Nsb3VkLWNvbmZpZwpyZXBvX3VwZGF0ZTogdHJ1ZQpyZXBvX3VwZ3JhZGU6IGFsbAoKcGFja2FnZXM6CiAgLSBodHRwZAogIC0gY3VybAoKcnVuY21kOgogIC0gWyBzaCwgLWMsICJhbWF6b24tbGludXgtZXh0cmFzIGluc3RhbGwgLXkgZXBlbCIgXQogIC0gWyBzaCwgLWMsICJ5dW0gLXkgaW5zdGFsbCBzdHJlc3MtbmciIF0KICAtIFsgc2gsIC1jLCAiZWNobyBoZWxsbyB3b3JsZC4gTXkgaW5zdGFuY2UtaWQgaXMgJChjdXJsIC1zIGh0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvbGF0ZXN0L21ldGEtZGF0YS9pbnN0YW5jZS1pZCkuIE15IGluc3RhbmNlLXR5cGUgaXMgJChjdXJsIC1zIGh0dHA6Ly8xNjkuMjU0LjE2OS4yNTQvbGF0ZXN0L21ldGEtZGF0YS9pbnN0YW5jZS10eXBlKS4gPiAvdmFyL3d3dy9odG1sL2luZGV4Lmh0bWwiIF0KICAtIFsgc2gsIC1jLCAic3lzdGVtY3RsIGVuYWJsZSBodHRwZCIgXQogIC0gWyBzaCwgLWMsICJzeXN0ZW1jdGwgc3RhcnQgaHR0cGQiIF0KCgo=\u0026#34; } EOF Biến %ami-id% nên được thay thế bằng AMI Amazon Linux 2 mới nhất. Bạn lấy ID AMI của Amazon Linux 2 mới nhất và cập nhật Id AMI trong tệp cấu hình của mình bằng cách chạy các lệnh sau. # Đầu tiên, command này tìm kiếm Amazon Linux 2 AMI mới nhất export ami_id=$(aws ec2 describe-images --owners amazon --filters \u0026#34;Name=name,Values=amzn2-ami-kernel*gp2\u0026#34; \u0026#34;Name=virtualization-type,Values=hvm\u0026#34; \u0026#34;Name=root-device-type,Values=ebs\u0026#34; --query \u0026#34;sort_by(Images, \u0026amp;CreationDate)[-1].ImageId\u0026#34; --output text) sed -i.bak -e \u0026#34;s#%instanceProfile%#$instanceProfile#g\u0026#34; -e \u0026#34;s#%ami-id%#$ami_id#g\u0026#34; launch-template-data.json Tạo launch template bằng cấu hình bạn vừa cập nhật. Bạn có thể kiểm tra các tham số khác được hỗ trợ bởi mẫu khởi chạy tại đây. aws ec2 create-launch-template --launch-template-name TemplateForWebServer --launch-template-data file://launch-template-data.json Kết quả ví dụ\n{ \u0026#34;LaunchTemplate\u0026#34;: { \u0026#34;LaunchTemplateId\u0026#34;: \u0026#34;lt-0dbe89c266217df42\u0026#34;, \u0026#34;LaunchTemplateName\u0026#34;: \u0026#34;TemplateForWebServer\u0026#34;, \u0026#34;CreateTime\u0026#34;: \u0026#34;2024-04-11T13:11:47+00:00\u0026#34;, \u0026#34;CreatedBy\u0026#34;: \u0026#34;arn:aws:iam::905418000290:user/AdminUser\u0026#34;, \u0026#34;DefaultVersionNumber\u0026#34;: 1, \u0026#34;LatestVersionNumber\u0026#34;: 1 } } Hãy xem tập lệnh dữ liệu người dùng được định cấu hình trên launch template để hiểu những gì được cài đặt trên các phiên bản trong khi khởi động. aws ec2 describe-launch-template-versions --launch-template-name TemplateForWebServer --output json | jq -r \u0026#39;.LaunchTemplateVersions[].LaunchTemplateData.UserData\u0026#39; | base64 --decode Kết quả ví dụ\n#cloud-config repo_update: true repo_upgrade: all packages: - httpd - curl runcmd: - [ sh, -c, \u0026#34;amazon-linux-extras install -y epel\u0026#34; ] - [ sh, -c, \u0026#34;yum -y install stress-ng\u0026#34; ] - [ sh, -c, \u0026#34;echo hello world. My instance-id is $(curl -s http://169.254.169.254/latest/meta-data/instance-id). My instance-type is $(curl -s http://169.254.169.254/latest/meta-data/instance-type). \u0026gt; /var/www/html/index.html\u0026#34; ] - [ sh, -c, \u0026#34;systemctl enable httpd\u0026#34; ] - [ sh, -c, \u0026#34;systemctl start httpd\u0026#34; ] Bước cuối cùng của phần này, bạn sẽ thực hiện lệnh gọi API bổ sung để truy xuất mã nhận dạng của launch template vừa được tạo và lưu trữ nó trong một biến môi trường. Bạn sử dụng ID mẫu khởi chạy này khi tạo nhóm Auto Scaling, Nhóm EC2 và Nhóm Spot. export LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates --filters Name=launch-template-name,Values=TemplateForWebServer | jq -r \u0026#39;.LaunchTemplates[0].LaunchTemplateId\u0026#39;) Tốt lắm! Bạn đã tạo một launch template và lưu trữ vào các biến môi trường tất cả các chi tiết mà bạn cần để tham khảo nó trong các bước tiếp theo.\n"
},
{
	"uri": "https://hieuminhvuu.github.io/Launching_EC2_Spot_Instance/vi/3-launching_ec2_spot_instances_via_ec2_auto_scaling_group/",
	"title": "Chạy EC2 spot instances thông qua EC2 auto scaling group",
	"tags": [],
	"description": "",
	"content": "\rKhi sử dụng EC2 Spot Instances, chúng tôi khuyên bạn nên xem xét nhóm Amazon EC2 Auto Scaling (ASG) vì nhóm này cung cấp các tính năng EC2 cập nhật mới nhất như lựa chọn loại phiên bản dựa trên thuộc tính, tái cân bằng công suất, chính sách thay đổi quy mô và nhiều chức năng khác.\nAmazon EC2 Auto Scaling groups chứa một tập hợp các Phiên bản Amazon EC2 được coi là một nhóm logic nhằm mục đích quản lý và điều chỉnh quy mô tự động. Các nhóm Auto Scaling cũng cho phép bạn sử dụng các tính năng Auto Scaling của Amazon EC2 như thay thế kiểm tra tình trạng và chính sách mở rộng. Cả việc duy trì số lượng phiên bản trong nhóm Auto Scaling và tự động thay đổi quy mô đều là chức năng cốt lõi của dịch vụ Auto Scaling của Amazon EC2.\nTrước đây, các nhóm Auto Scaling đã sử dụng cấu hình khởi chạy (launch configurations). Các ứng dụng sử dụng cấu hình khởi chạy sẽ di chuyển sang các launch templates để bạn có thể tận dụng các tính năng mới nhất. Với các launch templates, bạn có thể cung cấp năng lực cho nhiều loại phiên bản bằng cách sử dụng cả Spot Instances và On-Demand Instances để đạt được quy mô, hiệu suất và tối ưu hóa chi phí như mong muốn.\nSử dụng lựa chọn loại phiên bản dựa trên thuộc tính và các nhóm phiên bản hỗn hợp Việc linh hoạt phiên bản là một phương pháp quan trọng nhất của Spot - Spot best practice, bạn có thể sử dụng lựa chọn loại phiên bản dựa trên thuộc tính - attribute-based instance type selection (ABIS) để tự động chọn nhiều loại phiên bản phù hợp với yêu cầu của mình. Một trường hợp phổ biến khi sử dụng nhóm Auto Scaling là sử dụng nhóm này với khối lượng công việc yêu cầu kết hợp dung lượng Spot và On-Demand.\nỞ bước này, bạn tạo tệp json để tạo nhóm Auto Scaling bằng AWS CLI. Cấu hình này sử dụng launch template mà bạn đã tạo ở các bước trước và ABIS để chọn mọi loại phiên bản không có GPU thế hệ hiện tại có 2 vCPU và không có giới hạn về bộ nhớ. OnDemandBaseCapacity cho phép bạn đặt công suất ban đầu là 1 On-Demand Instances. Dung lượng còn lại là sự kết hợp giữa 25% On-Demand Instances và 75% Spot Instances được xác định bởi OnDemandPercentageAboveBaseCapacity.\ncat \u0026lt;\u0026lt;EoF \u0026gt; ./asg-policy.json { \u0026#34;LaunchTemplate\u0026#34;:{ \u0026#34;LaunchTemplateSpecification\u0026#34;:{ \u0026#34;LaunchTemplateId\u0026#34;:\u0026#34;${LAUNCH_TEMPLATE_ID}\u0026#34;, \u0026#34;Version\u0026#34;:\u0026#34;1\u0026#34; }, \u0026#34;Overrides\u0026#34;:[{ \u0026#34;InstanceRequirements\u0026#34;: { \u0026#34;VCpuCount\u0026#34;: { \u0026#34;Min\u0026#34;: 2, \u0026#34;Max\u0026#34;: 2 }, \u0026#34;MemoryMiB\u0026#34;: { \u0026#34;Min\u0026#34;: 0 }, \u0026#34;CpuManufacturers\u0026#34;: [ \u0026#34;intel\u0026#34;, \u0026#34;amd\u0026#34; ], \u0026#34;InstanceGenerations\u0026#34;: [ \u0026#34;current\u0026#34; ], \u0026#34;AcceleratorCount\u0026#34;: { \u0026#34;Max\u0026#34;: 0 } } }] }, \u0026#34;InstancesDistribution\u0026#34;:{ \u0026#34;OnDemandBaseCapacity\u0026#34;:1, \u0026#34;OnDemandPercentageAboveBaseCapacity\u0026#34;:25, \u0026#34;SpotAllocationStrategy\u0026#34;:\u0026#34;price-capacity-optimized\u0026#34; } } EoF Trong cấu hình này, bạn đặt SpotAllocationStrategy thành mức giá được tối ưu hóa theo khả năng. Chiến lược phân bổ được tối ưu hóa theo công suất giá sẽ phân bổ các phiên bản từ nhóm Spot Instance có mức giá thấp và độ khả dụng công suất cao. Bạn có thể đọc thêm về chiến lược phân bổ được tối ưu hóa theo khả năng về giá trong bài đăng trên blog Giới thiệu chiến lược phân bổ được tối ưu hóa theo khả năng về giá cho Phiên bản Spot EC2.\nChạy các lệnh sau để truy xuất VPC mặc định của bạn và sau đó là các subnet của nó. export VPC_ID=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true | jq -r \u0026#39;.Vpcs[0].VpcId\u0026#39;) export SUBNETS=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=\u0026#34;${VPC_ID}\u0026#34;) export SUBNET_1=$((echo $SUBNETS) | jq -r \u0026#39;.Subnets[0].SubnetId\u0026#39;) export SUBNET_2=$((echo $SUBNETS) | jq -r \u0026#39;.Subnets[1].SubnetId\u0026#39;) Chạy các lệnh sau để tạo nhóm Tự động thay đổi quy mô trên 2 Vùng sẵn sàng, kích thước tối thiểu 2, kích thước tối đa 20 và 10 đơn vị vCPU có công suất mong muốn. aws autoscaling create-auto-scaling-group --auto-scaling-group-name EC2SpotWorkshopASG --min-size 2 --max-size 20 --desired-capacity 10 --desired-capacity-type vcpu --vpc-zone-identifier \u0026#34;${SUBNET_1},${SUBNET_2}\u0026#34; --capacity-rebalance --mixed-instances-policy file://asg-policy.json Bây giờ bạn đã tạo một nhóm Auto Scaling hỗn hợp!\n"
},
{
	"uri": "https://hieuminhvuu.github.io/Launching_EC2_Spot_Instance/vi/4-launching_ec2_spot_instance_via_ec2_fleet/",
	"title": "Chạy EC2 spot thông qua via EC2 fleet",
	"tags": [],
	"description": "",
	"content": "EC2 Fleet cung cấp API cho phép vận hành và cung cấp với các biện pháp kiểm soát khá chi tiết. Nhóm EC2 chứa thông tin cấu hình để khởi chạy fleet hoặc group of instances. Khi sử dụng EC2 Fleet, bạn có thể xác định các mục tiêu công suất On-Demand và Spot riêng biệt, chỉ định loại phiên bản hoạt động tốt nhất cho ứng dụng của bạn và chỉ định cách Amazon EC2 sẽ phân bổ công suất fleet của bạn trong từng mô hình mua hàng.\nWorkloads có thể hưởng lợi từ API EC2 Fleet nằm trong số các nhà điều phối công suất riêng biệt khác triển khai logic được điều chỉnh và tối ưu hóa để cung cấp công suất. Chỉ cần nêu tên một số dự án sau đây sử dụng EC2 Fleet để quản lý năng lực:\nKarpenter. Karpenter là Công cụ chia tỷ lệ tự động của cụm Kubernetes. Nó quản lý vòng đời của node. Nó quan sát các pod đến và khởi chạy các instances phù hợp cho tình huống đó. Atlassian Escalator, một Bộ chia tỷ lệ tự động cụm Kubernetes khác. Được thiết kế cho workloads theo lô hoặc theo công việc lớn mà không thể bị ép buộc và di chuyển khi cụm cần thu nhỏ quy mô. EC2 Fleet ví dụ : Áp dụng đa dạng hóa phiên bản trên workloads HPC được kết hợp chặt chẽ với chế độ tức thì EC2 Fleet Trong phần workshop này, bạn giải quyết workload công việc chung mà EC2 Fleet mang lại sẽ mang lại lợi ích khi chạy.\nLưu ý rằng khi sử dụng Spot Instances, hầu hết MPI workloads, đặc biệt là những workloads chạy hàng giờ và không sử dụng điểm kiểm tra, đều không phù hợp với Spot Instances. Hãy nhớ rằng Spot Instances phù hợp với các ứng dụng có dung sai cao, có thể phục hồi sau khi mất và thay thế một hoặc nhiều phiên bản.\nTrong phần workshop này, bạn yêu cầu EC2 Fleet bằng cách sử dụng loại yêu cầu instant, đây là một tính năng chỉ có trong EC2 Fleet. Bằng cách đó, EC2 Fleet sẽ đưa ra yêu cầu đồng bộ một lần cho công suất mà bạn mong muốn. Trong phản hồi API, nó trả về các phiên bản đã khởi chạy, cùng với lỗi đối với những phiên bản không thể khởi chạy. Thông tin thêm về các loại yêu cầu tại đây.\nHPC workloads được kết hợp chặt chẽ thường bị suy giảm hiệu năng khi các phiên bản trong cụm thuộc các họ phiên bản và kích cỡ khác nhau (ví dụ: c5.large so với c4.large hoặc c5.large so với c5.xlarge). Đặc điểm khác của workloads này là tất cả các instance phải ở gần nhau (lý tưởng nhất là trong cùng một placement group). Để đáp ứng những hạn chế này, bạn đặt cấu hình yêu cầu nhóm với cùng loại instance (ví dụ: c5.large) trong một Availability Zone duy nhất. Nếu ứng dụng HPC của bạn được liên kết lỏng lẻo và bạn có thể loại bỏ các ràng buộc này và thay vào đó hãy sử dụng các nhóm Auto Scaling.\nTạo tệp cấu hình để khởi chạy EC2 Fleet với attribute-based instance type selection (ABIS). Run the following: cat \u0026lt;\u0026lt;EoF \u0026gt; ./ec2-fleet-config.json { \u0026#34;SpotOptions\u0026#34;:{ \u0026#34;SingleInstanceType\u0026#34;: true, \u0026#34;SingleAvailabilityZone\u0026#34;: true, \u0026#34;MinTargetCapacity\u0026#34;: 4, \u0026#34;AllocationStrategy\u0026#34;: \u0026#34;price-capacity-optimized\u0026#34;, \u0026#34;InstanceInterruptionBehavior\u0026#34;: \u0026#34;terminate\u0026#34; }, \u0026#34;OnDemandOptions\u0026#34;:{ \u0026#34;AllocationStrategy\u0026#34;: \u0026#34;lowest-price\u0026#34;, \u0026#34;SingleInstanceType\u0026#34;: true, \u0026#34;SingleAvailabilityZone\u0026#34;: true, \u0026#34;MinTargetCapacity\u0026#34;: 0 }, \u0026#34;LaunchTemplateConfigs\u0026#34;:[ { \u0026#34;LaunchTemplateSpecification\u0026#34;:{ \u0026#34;LaunchTemplateId\u0026#34;:\u0026#34;${LAUNCH_TEMPLATE_ID}\u0026#34;, \u0026#34;Version\u0026#34;:\u0026#34;1\u0026#34; }, \u0026#34;Overrides\u0026#34;:[{ \u0026#34;InstanceRequirements\u0026#34;: { \u0026#34;VCpuCount\u0026#34;: { \u0026#34;Min\u0026#34;: 2, \u0026#34;Max\u0026#34;: 4 }, \u0026#34;MemoryMiB\u0026#34;: { \u0026#34;Min\u0026#34;: 0 }, \u0026#34;CpuManufacturers\u0026#34;: [ \u0026#34;intel\u0026#34; ] } }] } ], \u0026#34;TargetCapacitySpecification\u0026#34;:{ \u0026#34;TotalTargetCapacity\u0026#34;: 4, \u0026#34;OnDemandTargetCapacity\u0026#34;: 0, \u0026#34;DefaultTargetCapacityType\u0026#34;: \u0026#34;spot\u0026#34; }, \u0026#34;Type\u0026#34;:\u0026#34;instant\u0026#34; } EoF Yêu cầu EC2 Fleet chỉ định riêng công suất mục tiêu cho Spot Instances và On-Demand Instances bằng cách sử dụng các trường OnDemandTargetCapacity và SpotTargetCapacity bên trong cấu trúc TargetCapacitySpecification. Giá trị của DefaultTargetCapacityType chỉ định nên sử dụng Spot Instances hay On-Demand Instances để đáp ứng TotalTargetCapacity.\nBằng cách đặt SingleInstanceType và SingleAvailabilityZone thành true, bạn đang buộc EC2 Fleet yêu cầu cung cấp tất cả các instances trong cùng một Availability Zone và cùng loại.\nSao chép và dán lệnh này để tạo EC2 Fleet và xuất mã định danh của nó sang một biến môi trường để theo dõi trạng thái của nhóm sau này. export FLEET_ID=$(aws ec2 create-fleet --cli-input-json file://ec2-fleet-config.json | jq -r \u0026#39;.FleetId\u0026#39;) Bây giờ bạn đã tạo EC2 Fleet với instance loại yêu cầu!\n"
},
{
	"uri": "https://hieuminhvuu.github.io/Launching_EC2_Spot_Instance/vi/5-creating_a_spot_interruption_experiment/",
	"title": "Tạo một điểm gián đoạn",
	"tags": [],
	"description": "",
	"content": "\rBạn có thể khởi chạy Spot Instances với dung lượng EC2 dự phòng để được giảm giá mạnh, đổi lại việc trả lại chúng khi Amazon EC2 cần lấy lại dung lượng. Khi Amazon EC2 lấy lại Spot Instance, chúng tôi gọi sự kiện này là gián đoạn Spot Instance.\nKhi sử dụng Spot Instances, bạn cần chuẩn bị sẵn sàng cho tình trạng gián đoạn Spot Instances. Một phương pháp phổ biến là kiểm tra khả năng phục hồi của ứng dụng bằng cách mô phỏng các gián đoạn Spot. Bạn có thể kích hoạt tính năng gián đoạn Spot bằng cách sử dụng AWS Fault Tiêm Simulator (FIS) bằng cách nhắm mục tiêu các Spot Instances riêng lẻ hoặc một tập hợp con của các instance được quản lý bởi các dịch vụ như ASG và EC2 Fleet.\nNgắt Spot instances trực tiếp từ Amazon EC2 Console To trigger a Spot Instance interruption from the Amazon EC2 console, you just need to navigate to the Spot Request section. Select a Spot Instance request and then choose Actions and then Initiate interruption. Behind the scenes, we then use AWS FIS to inject the interruption in your selected Spot Instance.\nĐể kích hoạt gián đoạn Spot Instance từ Amazon EC2 console, bạn chỉ cần điều hướng đến phần Spot Request. Chọn một yêu cầu Spot Instance, sau đó chọn Action rồi Initiate interruption. Phía sau, chúng tôi sử dụng AWS FIS để đưa gián đoạn vào Spot Instance đã chọn của bạn.\nNgắt Spot Instance trong AWS FIS bằng AWS CLI Hiện tại, AWS FIS có Định mức dịch vụ tối đa là 5 tài nguyên cho mỗi mục tiêu thử nghiệm trên mỗi tài khoản trên mỗi khu vực và Không thể định cấu hình Định mức dịch vụ. Điều này có nghĩa là ngay cả khi thử nghiệm của bạn nhắm mục tiêu nhiều hơn 5 EC2 Spot Instances, AWS FIS sẽ tự giới hạn ở mức 5 EC2 Spot Instances bị gián đoạn trên mỗi thử nghiệm. Bạn có thể vượt qua giới hạn này bằng cách chạy nhiều hơn 1 thử nghiệm cùng một lúc.\nĐể sử dụng AWS FIS, bạn chạy thử nghiệm trên tài nguyên AWS của mình để kiểm tra lý thuyết về cách ứng dụng hoặc hệ thống sẽ hoạt động trong điều kiện có lỗi. Để chạy thử nghiệm, trước tiên bạn phải tạo mẫu thử nghiệm. Mẫu thử nghiệm là bản thiết kế thử nghiệm của bạn. Nó chứa các hành động, mục tiêu và điều kiện dừng cho thử nghiệm.\nTrong phần này, bạn 1- tạo vai trò IAM cấp cho AWS FIS quyền thực hiện thử nghiệm, 2- tạo mẫu thử nghiệm FIS và 3- và chạy thử nghiệm để kích hoạt gián đoạn Spot Instance.\n1. Tạo một IAM Role cho AWS FIS Để sử dụng AWS FIS, bạn phải tạo IAM role cấp cho AWS FIS các quyền cần thiết để AWS FIS có thể thay mặt bạn chạy thử nghiệm. Bạn chỉ định role thử nghiệm này khi tạo mẫu thử nghiệm. Để biết thêm thông tin, hãy xem Tạo vai trò IAM cho thử nghiệm AWS FIS.\nRole thử nghiệm phải có mối quan hệ tin cậy cho phép dịch vụ AWS FIS đảm nhận vai trò này. Tạo một tệp văn bản có tên fis_role_trust_policy.json để thêm mối quan hệ tin cậy. cat \u0026lt;\u0026lt;EoF \u0026gt; ./fis_role_trust_policy.json { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowFISExperimentRoleAssumeRole\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: [ \u0026#34;fis.amazonaws.com\u0026#34; ] }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; } ] } EoF Chạy lệnh create-role để tạo role với chính sách đáng tin. aws iam create-role --role-name my-fis-role --assume-role-policy-document file://fis_role_trust_policy.json Thử nghiệm yêu cầu quyền truy cập để thực hiện hành động ec2:RebootInstances, ec2:StopInstances, ec2:StartInstances, ec2:TerminateInstances và aws:ec2:send-spot-instance-interruptions trên EC2 Instances. Chạy lệnh bên dưới để tạo tệp cấu hình fis_role_permissions_policy.json nhằm thêm các chính sách cấp phép bắt buộc. cat \u0026lt;\u0026lt;EoF \u0026gt; ./fis_role_permissions_policy.json { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowFISExperimentRoleEC2Actions\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ec2:RebootInstances\u0026#34;, \u0026#34;ec2:StopInstances\u0026#34;, \u0026#34;ec2:StartInstances\u0026#34;, \u0026#34;ec2:TerminateInstances\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:ec2:*:*:instance/*\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;AllowFISExperimentRoleSpotInstanceActions\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ec2:SendSpotInstanceInterruptions\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:ec2:*:*:instance/*\u0026#34; } ] } EoF Chạy lệnh put-role-policy để thêm những quyền này tới role đã tạo lúc trước đó. aws iam put-role-policy --role-name my-fis-role --policy-name my-fis-policy --policy-document file://fis_role_permissions_policy.json Lưu ARN của role được tạo trong biến môi trường để sử dụng trong các phần tiếp theo. export FIS_ROLE_ARN=$(aws iam get-role --role-name my-fis-role | jq -r \u0026#39;.Role.Arn\u0026#39;) 2. Tạo ra mẫu thử nghiệm Spot interruption Ở bước này, bạn tạo một mẫu thử nghiệm gửi tính năng gián đoạn Spot tới Spot Instances được khởi chạy thông qua nhóm EC2 Auto Scaling hoặc nhóm EC2 trong các chương trước.\nMẫu thử nghiệm AWS FIS bao gồm:\nMột hành động, đó là một hoạt động mà AWS FIS thực hiện trên tài nguyên AWS trong quá trình thử nghiệm. Trong trường hợp này, bạn sử dụng hành động được cấu hình sẵn aws:ec2:send-spot-instance-interruptions để gửi thông báo gián đoạn Spot Instance tới các Spot Instance hai phút trước khi làm gián đoạn chúng. Hành động này cũng gửi đề xuất cân bằng lại phiên bản EC2 dựa trên tham số intervalBeforeInterruption. Trong trường hợp này, bạn đặt Hành động được cấu hình sẵn aws:ec2:send-spot-instance-interruptions với thời lượngBeforeInterruption được đặt thành 2 phút. Bạn có thể thay đổi thành giá trị lớn hơn 2 phút để thể hiện đề xuất cân bằng lại EC2 Instance trước thông báo gián đoạn Spot Instance.\nMục tiêu là một hoặc nhiều tài nguyên AWS mà trên đó thử nghiệm AWS FIS thực hiện một hành động trong quá trình thử nghiệm. Trong trường hợp này, bạn đặt mục tiêu với aws:ec2:spot-instance làm loại tài nguyên và lọc Spot Instance được khởi chạy qua ASG bằng cách sử dụng các Thẻ tài nguyên được đặt thành \u0026ldquo;aws:autoscaling:groupName\u0026rdquo;: \u0026ldquo;EC2SpotWorkshopASG\u0026rdquo;.\nĐiều kiện dừng là cơ chế của AWS FIS để dừng thử nghiệm nếu thử nghiệm đạt đến ngưỡng mà bạn xác định là cảnh báo của Amazon CloudWatch. Trong trường hợp này, thử nghiệm chạy mà không có điều kiện dừng.\nTạo một mẫu thử nghiệm bằng lệnh này. cat \u0026lt;\u0026lt;EoF \u0026gt; ./spot_experiment.json { \u0026#34;description\u0026#34;: \u0026#34;Test Spot Instance interruptions\u0026#34;, \u0026#34;targets\u0026#34;: { \u0026#34;SpotInstancesInASG\u0026#34;: { \u0026#34;resourceType\u0026#34;: \u0026#34;aws:ec2:spot-instance\u0026#34;, \u0026#34;resourceTags\u0026#34;: { \u0026#34;aws:autoscaling:groupName\u0026#34;: \u0026#34;EC2SpotWorkshopASG\u0026#34; }, \u0026#34;filters\u0026#34;: [ { \u0026#34;path\u0026#34;: \u0026#34;State.Name\u0026#34;, \u0026#34;values\u0026#34;: [ \u0026#34;running\u0026#34; ] } ], \u0026#34;selectionMode\u0026#34;: \u0026#34;PERCENT(50)\u0026#34; } }, \u0026#34;actions\u0026#34;: { \u0026#34;interruptSpotInstance\u0026#34;: { \u0026#34;actionId\u0026#34;: \u0026#34;aws:ec2:send-spot-instance-interruptions\u0026#34;, \u0026#34;parameters\u0026#34;: { \u0026#34;durationBeforeInterruption\u0026#34;: \u0026#34;PT2M\u0026#34; }, \u0026#34;targets\u0026#34;: { \u0026#34;SpotInstances\u0026#34;: \u0026#34;SpotInstancesInASG\u0026#34; } } }, \u0026#34;stopConditions\u0026#34;: [ { \u0026#34;source\u0026#34;: \u0026#34;none\u0026#34; } ], \u0026#34;roleArn\u0026#34;: \u0026#34;${FIS_ROLE_ARN}\u0026#34;, \u0026#34;tags\u0026#34;: {} } EoF Tạo mẫu thử nghiệm bằng cách sử dụng cấu hình json. export FIS_TEMPLATE_ID=$(aws fis create-experiment-template --cli-input-json file://spot_experiment.json | jq -r \u0026#39;.experimentTemplate.id\u0026#39;) 3. Chạy thử nghiệm gián đoạn Spot Để chạy thử nghiệm, bạn sử dụng lệnh bắt đầu thử nghiệm để chạy mẫu đã tạo trước đó. Bạn có thể chạy thử nghiệm nhiều lần để xác thực kết quả chạy ứng dụng của bạn trên EC2 Spot.\naws fis start-experiment --experiment-template-id $FIS_TEMPLATE_ID Theo kết quả của thử nghiệm này, bạn thấy rằng 50% Spot Instance do nhóm Auto Scaling khởi chạy nhận được tín hiệu Đề xuất tái cân bằng. Lưu ý rằng con số này nhỏ hơn Hạn ngạch dịch vụ là 5, là số lượng EC2 Spot Instance tối đa có thể bị gián đoạn bởi một thử nghiệm. Khi các hành động trong thử nghiệm này hoàn tất:\nSpot Instance mục tiêu nhận được tín hiệu đề xuất cân bằng lại Instance. Thông báo gián đoạn Spot Instance được đưa ra hai phút trước khi Amazon EC2 chấm dứt Instance của bạn. Sau hai phút, Spot Instance sẽ kết thúc. Thử nghiệm có thể thất bại nếu bạn không có bất kỳ Spot Instance nào đang chạy trong nhóm EC2 Auto Scaling hoặc Nhóm EC2 của mình. Nếu bạn gặp lỗi khiến thử nghiệm không thành công, hãy mở rộng quy mô nhóm EC2 Auto Scaling hoặc EC2 Fleet để cung cấp các EC2 Spot Instance.\nThiết lập nhóm Tự động thay đổi quy mô trong ví dụ đã bật Cân bằng lại công suất và do đó, nhóm Tự động thay đổi quy mô sẽ bắt đầu khởi chạy các EC2 Spot Instance thay thế khi các Spot Instance nhận được tín hiệu gián đoạn. Bạn có thể xem những sự kiện này trong ASG.\nVới những thử nghiệm này, bạn có thể xác thực khả năng phục hồi của khối lượng công việc của mình trước tình trạng gián đoạn Spot và tùy ý cải thiện khả năng phục hồi của khối lượng công việc bằng cách triển khai các tác vụ điểm kiểm tra hoặc dọn dẹp.\n"
},
{
	"uri": "https://hieuminhvuu.github.io/Launching_EC2_Spot_Instance/vi/6-savings_summary/",
	"title": "Saving summary",
	"tags": [],
	"description": "",
	"content": "Spot Savings Cho đến nay, chúng tôi đã khởi chạy Spot Instance theo một số cách. Đây là một câu hỏi: Bạn nghĩ chúng ta đã tiết kiệm được bao nhiêu cho workloads này?\nBạn có thể kiểm tra xem mình đã tiết kiệm được bao nhiêu với Spot Instance bằng cách đi tới bảng Savings Summary. Để xem khoản tiết kiệm của bạn, hãy làm như sau:\nMở Amazon EC2 console tại https://console.aws.amazon.com/ec2/. Trong ngăn điều hướng, chọn Spot Requests. Ở góc trên bên phải của màn hình, chọn Savings summary Spot price history \u0026amp; Spot notifications Có nhiều API hơn mà bạn có thể sử dụng để tìm hiểu thêm về Spot.\nMột số dự án, như the EC2 Spot Interruption Dashboard có thể được sử dụng làm điểm ban đầu để hiểu Spot Instance nào đang bị chấm dứt và điều chỉnh cấu hình của bạn bằng cách tăng cường đa dạng hóa.\nMột số API khác có thể hữu ích để hiểu giá Spot thay đổi như thế nào theo thời gian. Bạn cũng có thể xem thông tin này trong AWS Console bằng cách:\nMở Amazon EC2 console tại https://console.aws.amazon.com/ec2/. Trong ngăn điều hướng, chọn Spot Requests. Chọn Pricing history ở góc trên cùng bên phải. Nếu quan tâm đến cách sử dụng Spot API theo chương trình, bạn có thể sử dụng describe-spot-price-history để truy xuất thông tin bạn cần.\nCông cụ quản lý chi phí Bạn cũng có thể xem Spot Savings bằng cách sử dụng AWS Cost Explorer, có giao diện dễ sử dụng cho phép bạn trực quan hóa, hiểu rõ và quản lý chi phí cũng như mức sử dụng AWS của bạn theo thời gian, bao gồm cả Spot Instances. Bạn có thể sử dụng Cost Explorer được lọc theo “Tùy chọn mua hàng” để xem mẫu số tiền bạn chi tiêu cho Phiên bản Spot theo thời gian và xem xu hướng mà bạn có thể sử dụng để hiểu chi phí của mình. Bạn có thể xem dữ liệu trong 12 tháng qua và dự báo ba tháng tiếp theo.\nKhách hàng AWS có quyền truy cập vào dữ liệu sử dụng và chi phí thô thông qua báo cáo AWS Cost and Usage (AWS CUR). Những báo cáo này chứa thông tin toàn diện nhất về mức sử dụng và chi phí AWS của bạn. Nếu bạn đang sử dụng Spot Instance cho nhu cầu điện toán của mình thì AWS CUR sẽ điền vào các cột giá sử dụng Spot của Amazon EC2 và các cột sản phẩm. Với dữ liệu này, bạn có thể tính toán mức tiết kiệm trước đây đạt được với Spot thông qua AWS CUR.\n"
},
{
	"uri": "https://hieuminhvuu.github.io/Launching_EC2_Spot_Instance/vi/7-spot_placement_score/",
	"title": "Spot placement score",
	"tags": [],
	"description": "",
	"content": "Khi số lượng Spot biến động, bạn không thể chắc chắn rằng mình sẽ luôn nhận được số lượng mình cần. Tính năng chấm điểm vị trí Spot có thể đề xuất (các) Region AWS hoặc (các) Availability Zone nơi bạn có thể chạy khối lượng công việc dựa trên yêu cầu về số lượng Spot của mình. Điểm vị trí Spot cho (các) Region hoặc (các) Availability Zone điểm từ 1 đến 10 cho biết khả năng thành công của yêu cầu Spot. Điểm 10 cho biết rằng yêu cầu Spot của bạn có nhiều khả năng—nhưng không đảm bảo—thành công và điểm 1 cho biết rằng yêu cầu Spot của bạn hoàn toàn không có khả năng thành công. Để SPS trả về điểm có ý nghĩa, yêu cầu SPS phải được đặt cấu hình với ít nhất ba loại phiên bản.\nBạn có thể tính điểm vị trí Spot bằng cách sử dụng Amazon EC2 Console hoặc AWS CLI.\nCùng một yêu cầu điểm vị trí Spot có thể mang lại các điểm khác nhau cho cùng một Region hoặc Availability Zone khi được tính vào các thời điểm khác nhau. Điểm vị trí Spot giống nhau có thể được trả về cho các Region hoặc Availability Zone khác nhau.\nĐiểm vị trí Spot có thể được sử dụng để\nxác định khả năng di dời và mở rộng quy mô công suất điện toán Spot ở một Region khác nếu khối lượng công việc linh hoạt theo region xác định Availability Zone tối ưu nhất để chạy khối lượng công việc của Availability Zone duy nhất tìm cấu hình tối ưu sẽ đáp ứng nhu cầu số lượng Spot Sử dụng bảng Amazon EC2 Console để tính điểm vị trí Spot Mở Amazon EC2 console tại https://console.aws.amazon.com/ec2/. Trong ngăn điều hướng, chọn Spot Requests. Chọn Spot placement score ở góc trên bên phải. Cung cấp các đầu vào như hiển thị bên dưới:\nĐầu ra mẫu của phản hồi trên bảng điều khiển được hiển thị bên dưới:\nSử dụng AWS CLI để tính điểm vị trí Spot Bạn có thể sử dụng tệp json bao gồm các tham số để chạy yêu cầu điểm vị trí Spot.\nĐể bắt đầu, hãy chỉ định dung lượng Spot mục tiêu, dưới dạng vCPU hoặc bộ nhớ tính bằng MiB hoặc theo đơn vị. Bằng cách chỉ định dung lượng mục tiêu của bạn theo số lượng vCPU hoặc dung lượng bộ nhớ, bạn có thể sử dụng các đơn vị này khi tính tổng dung lượng. Ví dụ: khi trộn các instances có kích thước khác nhau, bạn có thể chỉ định số lượng mục tiêu theo tổng bộ nhớ. Các phiên bản có kích thước khác nhau được xem xét dựa trên bộ nhớ của nó thay vì tổng số phiên bản khi tính tổng số lượng mục tiêu.\nChỉ định các thuộc tính hoặc loại Instance. Nếu có thể chọn instance dựa trên thuộc tính, bạn có thể sử dụng lựa chọn loại instance dựa trên thuộc tính để chỉ định nhu cầu điện toán của mình. Nếu bạn cần sử dụng các loại instance cụ thể cho khối lượng công việc của mình, hãy chỉ định các loại phiên bản này. Trong cả hai trường hợp, hãy đảm bảo rằng yêu cầu về dung lượng Spot của bạn bao gồm ít nhất ba loại Instance trong yêu cầu.\ncat \u0026lt;\u0026lt;EoF \u0026gt; ./sps-input.json { \u0026#34;InstanceRequirementsWithMetadata\u0026#34;: { \u0026#34;ArchitectureTypes\u0026#34;: [ \u0026#34;x86_64\u0026#34; ], \u0026#34;InstanceRequirements\u0026#34;: { \u0026#34;VCpuCount\u0026#34;: { \u0026#34;Min\u0026#34;: 4, \u0026#34;Max\u0026#34;: 8 }, \u0026#34;MemoryMiB\u0026#34;: { \u0026#34;Min\u0026#34;: 16384 } } }, \u0026#34;TargetCapacity\u0026#34;: 100, \u0026#34;TargetCapacityUnitType\u0026#34;: \u0026#34;vcpu\u0026#34;, \u0026#34;SingleAvailabilityZone\u0026#34;: false } EoF Trong ví dụ trên, chúng tôi sẽ chạy điểm vị trí Spot cho 10K vCPU sử dụng bất kỳ phiên bản kiến trúc x86 nào có vCPU từ 4 đến 8 và Bộ nhớ lớn hơn 16 MB. Để chạy yêu cầu điểm vị trí Spot với các thông số trên, hãy sử dụng lệnh này.\naws ec2 get-spot-placement-scores --cli-input-json file://./sps-input.json Điểm vị trí Spot trả về 10 khu vực hoặc 10 Availability Zones hàng đầu nơi yêu cầu Spot cụ thể có nhiều khả năng thành công nhất. Bạn có thể thu hẹp các Region sẽ được xem xét trong phản hồi. Bạn có thể kết hợp bộ lọc Khu vực và yêu cầu Availability Zones được tính điểm để trả về danh sách được tính điểm của tất cả các Availability Zones.\n"
},
{
	"uri": "https://hieuminhvuu.github.io/Launching_EC2_Spot_Instance/vi/8-spot_blueprints/",
	"title": "Spot Blueprint",
	"tags": [],
	"description": "",
	"content": "Spot Blueprints là một chức năng được cung cấp trong Bảng điều khiển web AWS, trong phần Yêu cầu Spot, giúp tạo ra một số kiến trúc phổ biến nhất cho Spot, sử dụng Cơ sở hạ tầng làm mã và tuân thủ các biện pháp thực hành Spot Best. Có Bản thiết kế giao ngay cho các dịch vụ phổ biến nhất bao gồm Amazon EC2 Auto Scaling, Amazon EMR, AWS Batch và Amazon Elastic Kubernetes Service (Amazon EKS).\nSpot Blueprints giúp bạn có bước khởi đầu thuận lợi trong việc sử dụng kiến trúc Spot bằng cách cung cấp trình tạo mẫu mã cơ sở hạ tầng dễ thực hiện, được thiết kế để thu thập các yêu cầu về khối lượng công việc của bạn, đồng thời giải thích và định cấu hình các biện pháp thực hành tốt nhất của Spot trong quá trình thực hiện. Đầu ra của quy trình là tệp Cloudformation hoặc Terraform IaaC (Cơ sở hạ tầng dưới dạng mã) mà bạn có thể sử dụng và điều chỉnh cho các dự án của mình.\nGetting started with Spot Blueprints Mở Amazon EC2 console at https://console.aws.amazon.com/ec2/. Trong ngăn điều hướng, chọn Spot Requests. Chọn Spot Blueprints ở góc trên bên phải. Bạn sẽ thấy các danh mục khác nhau để bắt đầu. Từ đó, bạn có thể tải xuống bản thiết kế được định cấu hình sẵn ở định dạng AWS CloudFormation hoặc Terraform hoặc chọn định cấu hình bản thiết kế đó. Bạn có thể tìm hiểu thêm về Spot Blueprints bằng cách đọc launch blog post.\n"
},
{
	"uri": "https://hieuminhvuu.github.io/Launching_EC2_Spot_Instance/vi/9-clean_up/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Trước khi kết thúc workshop, hãy đảm bảo rằng chúng ta dọn sạch tất cả tài nguyên mà chúng ta đã tạo để không phải gánh chịu những chi phí không mong muốn.\nXóa mẫu thử nghiệm AWS FIS Khi bạn thực hiện xong các thử nghiệm FIS, bạn có thể xóa mẫu thử nghiệm.\naws fis delete-experiment-template --id $FIS_TEMPLATE_ID Xoá Auto Scaling Group Để xoá your Auto Scaling group sử dụng CLI\naws autoscaling delete-auto-scaling-group --auto-scaling-group-name EC2SpotWorkshopASG --force-delete Xoá EC2 Fleet Khi kết thúc sử dụng EC2 Fleet, bạn có thể xoá EC2 Fleet(s) và chấm dứt tất cả instance.\nĐể xoá EC2 Fleet và chấm dứt các instance đang chạy sử dụng CLI\naws ec2 delete-fleets --fleet-ids \u0026#34;${FLEET_ID}\u0026#34; --terminate-instances Chấm dứt Spot instances đã tạo bởi RunInstance Bạn nhớ lại chúng tôi đã tạo Instance này bằng Name Tag cụ thể. Chúng tôi sẽ sử dụng name tag để tìm kiếm instance và sau đó chuyển instance-id tới lệnh gọi EC2 của Instance kết thúc.\nexport INSTANCE_ID=$(aws ec2 describe-instances --filters \u0026#34;Name=tag-value,Values=EC2SpotWorkshopRunInstance\u0026#34; --query \u0026#34;Reservations[0].Instances[0].InstanceId\u0026#34; | sed s/\\\u0026#34;//g) aws ec2 terminate-instances --instance-ids $INSTANCE_ID Xoá Spot Fleet Request Bây giờ hãy hủy hoặc xóa yêu cầu Spot Fleet. Bạn phải chỉ định liệu Spot Fleet có nên chấm dứt Spot Fleet của nó hay không. Nếu bạn chấm dứt các Instance, yêu cầu Spot Fleet sẽ chuyển sang trạng thái cancelled_terminating. Nếu không, yêu cầu Spot Fleet sẽ chuyển sang trạng thái cancel_running và các instance tiếp tục chạy cho đến khi chúng bị gián đoạn hoặc bạn chấm dứt chúng theo cách thủ công.\nĐể huỷ Spot Fleet request và chấm dứt instance đang chạy sử dụng CLI\naws ec2 cancel-spot-fleet-requests --spot-fleet-request-ids \u0026#34;${SPOT_FLEET_REQUEST_ID}\u0026#34; --terminate-instances Xoá Launch Template Cuối cùng, bây giờ tất cả các phiên bản đã bị chấm dứt, hãy xóa Launch Template.\naws ec2 delete-launch-template --launch-template-id \u0026#34;${LAUNCH_TEMPLATE_ID}\u0026#34; "
},
{
	"uri": "https://hieuminhvuu.github.io/Launching_EC2_Spot_Instance/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hieuminhvuu.github.io/Launching_EC2_Spot_Instance/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]